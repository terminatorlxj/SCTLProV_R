type token =
  | Module
  | Model
  | Var
  | Define
  | Init
  | Transition
  | Fairness
  | Atomic
  | Spec
  | Int
  | Bool
  | Top
  | Bottom
  | AX
  | EX
  | AF
  | EG
  | AR
  | EU
  | Neg
  | Colon
  | Semicolon
  | Comma
  | Dot
  | LB1
  | RB1
  | LB2
  | RB2
  | LB3
  | RB3
  | And
  | Or
  | Equal
  | Assigno
  | Add
  | Minus
  | Mult
  | DotDot
  | Scalar
  | Nego
  | Ando
  | Oro
  | Non_equal
  | Mod
  | LT
  | GT
  | LE
  | GE
  | File_end
  | Id of (string)
  | I of (int)
  | B of (bool)

open Parsing;;
let _ = parse_error;;
# 2 "parser.mly"
open Lexing
open Term
open Formula
open Modul

(********helper varaiables and functions for the parser*********)
let tmp_parameter_list = ref [] 
let tmp_var_list = ref []
let tmp_symbol_tbl = ref (Hashtbl.create 10)
let tmp_init_assign = ref [] 
let tmp_transitions = ref []
let tmp_fairness = ref []
let tmp_atomic_tbl = ref (Hashtbl.create 5)
let tmp_spec_list = ref []

let clear_tmps () = 
	tmp_parameter_list := [];
	tmp_var_list := [];
	tmp_symbol_tbl := Hashtbl.create 10;
	tmp_init_assign := [];
	tmp_transitions := [];
	tmp_fairness := [];
	tmp_atomic_tbl := Hashtbl.create 5;
	tmp_spec_list := []

let tmp_state_var_list = ref []

let module_tbl = Hashtbl.create 5
let modl = ref {name="";
		parameter_list=[];
		var_list=[];
		symbol_tbl=Hashtbl.create 0;
		init_assign=[];
		transitions=[];
		fairness=[];
		atomic_tbl=Hashtbl.create 0;
		spec_list=[];}

let position_in_var_list v vl = 
  let rec position_from_start v1 vl1 i = 
    match vl1 with
    | [] -> -1
    | (s, e) :: vl1' -> if v1 = s then i else position_from_start v1 vl1' (i+1)
  in position_from_start v vl 0

let position_in_state_var_list sv svl = 
  let rec position_from_start v vl i = 
    match vl with
    | [] -> -1
    | s :: vl' -> if v = s then i else position_from_start v vl' (i+1)
  in position_from_start sv svl 0
(**
let rec get_var_position vl vtl = 
  match vl with
  | [] -> print_endline "invalid nested variable encountered."; exit 1
  | [v] -> position_in_var_list v vtl
  | v :: vl' -> let pv = position_in_var_list v vtl in 
		if (pv = -1) then (print_endline (v^" is not defined."); exit 1) else 
		  (let vt = snd (List.nth vtl pv) in 
		   match vt with
		   | Module_type m -> pv + (get_var_position vl' m.var_list)
		   | _ -> print_endline (v^" is not a Module."); exit 1)
**)
(*******tmp function*******)
let rec str_str_list sl = 
	match sl with
	| [] -> ""
	| [s] -> s
	| s :: sl' -> s^","^(str_str_list sl')

(**************************)


let rec find_scalar_position sc vtl = 
  let rec find_str_position s sl i = 
    match sl with
    | [] -> -1
    | s' :: sl' -> if s = s' then i else find_str_position s sl' (i+1) in 
  match vtl with
  | [] -> -1	
  | (s, Scalar_type sl) :: vtl' -> 
     let i1 = find_str_position sc sl 0 in 
     begin
		(*print_endline ("finding the position of "^sc^" in "^(str_str_list sl)^" and result is "^(string_of_int i1));*)
       if i1 = -1 then find_scalar_position sc vtl'
       else i1
     end
  | (s, et) :: vtl' -> find_scalar_position sc vtl'

let rec check_current_symbols stbl = 
  let tmp_s = ref "" in 
  let rec check_symbol s = 
    try
      match s with
      | Const i -> true
(*      | Parameter p -> true*)
      | Var v -> true
(*      | Symbol s1 -> Hashtbl.mem stbl s1*)
			| Vars s1 -> Hashtbl.mem stbl s1
      | Add (e1, e2) -> (check_symbol e1) && (check_symbol e2)
      | Negi e1 -> check_symbol e1
      | Minus (e1, e2) -> (check_symbol e1) && (check_symbol e2)
      | Mult (e1, e2) -> (check_symbol e1) && (check_symbol e2)
      | Negb e1 -> check_symbol e1
      | Ando (e1, e2) -> (check_symbol e1) && (check_symbol e2)
      | Oro (e1, e2) -> (check_symbol e1) && (check_symbol e2)
      | Equal (e1, e2) -> (check_symbol e1) && (check_symbol e2)
      | _ -> false
    with
      Not_found -> false in
  Hashtbl.iter
    (fun a b -> if (!tmp_s = "") then (if not (check_symbol b) then tmp_s := a)) 
    stbl;
  !tmp_s
(***************************************************************)
let parse_error s = print_endline s
# 175 "parser.ml"
let yytransl_const = [|
  257 (* Module *);
  258 (* Model *);
  259 (* Var *);
  260 (* Define *);
  261 (* Init *);
  262 (* Transition *);
  263 (* Fairness *);
  264 (* Atomic *);
  265 (* Spec *);
  266 (* Int *);
  267 (* Bool *);
  268 (* Top *);
  269 (* Bottom *);
  270 (* AX *);
  271 (* EX *);
  272 (* AF *);
  273 (* EG *);
  274 (* AR *);
  275 (* EU *);
  276 (* Neg *);
  277 (* Colon *);
  278 (* Semicolon *);
  279 (* Comma *);
  280 (* Dot *);
  281 (* LB1 *);
  282 (* RB1 *);
  283 (* LB2 *);
  284 (* RB2 *);
  285 (* LB3 *);
  286 (* RB3 *);
  287 (* And *);
  288 (* Or *);
  289 (* Equal *);
  290 (* Assigno *);
  291 (* Add *);
  292 (* Minus *);
  293 (* Mult *);
  294 (* DotDot *);
  295 (* Scalar *);
  296 (* Nego *);
  297 (* Ando *);
  298 (* Oro *);
  299 (* Non_equal *);
  300 (* Mod *);
  301 (* LT *);
  302 (* GT *);
  303 (* LE *);
  304 (* GE *);
  305 (* File_end *);
    0|]

let yytransl_block = [|
  306 (* Id *);
  307 (* I *);
  308 (* B *);
    0|]

let yylhs = "\255\255\
\001\000\002\000\002\000\002\000\002\000\002\000\002\000\002\000\
\003\000\003\000\003\000\011\000\011\000\011\000\011\000\012\000\
\012\000\012\000\004\000\013\000\013\000\013\000\007\000\015\000\
\015\000\016\000\016\000\016\000\016\000\016\000\016\000\016\000\
\016\000\016\000\016\000\016\000\016\000\016\000\016\000\016\000\
\016\000\016\000\016\000\016\000\016\000\016\000\017\000\017\000\
\017\000\017\000\017\000\017\000\017\000\005\000\018\000\018\000\
\018\000\018\000\019\000\019\000\019\000\014\000\014\000\014\000\
\014\000\014\000\014\000\014\000\014\000\014\000\014\000\014\000\
\014\000\014\000\014\000\014\000\014\000\014\000\014\000\014\000\
\014\000\014\000\014\000\020\000\020\000\020\000\020\000\020\000\
\020\000\020\000\006\000\021\000\021\000\022\000\022\000\022\000\
\010\000\023\000\023\000\023\000\008\000\025\000\025\000\026\000\
\027\000\027\000\027\000\009\000\028\000\028\000\024\000\024\000\
\024\000\024\000\024\000\024\000\024\000\024\000\024\000\024\000\
\024\000\024\000\024\000\029\000\029\000\029\000\000\000"

let yylen = "\002\000\
\002\000\000\000\011\000\012\000\013\000\014\000\014\000\015\000\
\000\000\003\000\005\000\005\000\001\000\003\000\001\000\000\000\
\002\000\004\000\004\000\000\000\005\000\008\000\004\000\000\000\
\005\000\001\000\001\000\001\000\004\000\001\000\002\000\002\000\
\002\000\003\000\003\000\003\000\003\000\003\000\003\000\003\000\
\003\000\003\000\003\000\003\000\003\000\003\000\003\000\006\000\
\006\000\009\000\003\000\006\000\003\000\004\000\000\000\005\000\
\007\000\008\000\000\000\001\000\003\000\001\000\001\000\001\000\
\004\000\004\000\001\000\002\000\002\000\002\000\003\000\003\000\
\003\000\003\000\003\000\003\000\003\000\003\000\003\000\003\000\
\003\000\003\000\003\000\003\000\006\000\006\000\009\000\003\000\
\006\000\003\000\004\000\000\000\007\000\000\000\005\000\008\000\
\004\000\000\000\006\000\003\000\004\000\000\000\008\000\001\000\
\000\000\001\000\003\000\004\000\000\000\005\000\001\000\001\000\
\004\000\002\000\003\000\003\000\008\000\008\000\008\000\008\000\
\012\000\012\000\003\000\000\000\001\000\003\000\002\000"

let yydefred = "\000\000\
\002\000\000\000\127\000\000\000\000\000\000\000\001\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\013\000\000\000\000\000\015\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\014\000\011\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\024\000\000\000\
\000\000\000\000\000\000\000\000\000\000\012\000\018\000\000\000\
\019\000\000\000\000\000\000\000\000\000\003\000\000\000\000\000\
\000\000\000\000\000\000\023\000\000\000\000\000\054\000\000\000\
\000\000\000\000\000\000\000\000\062\000\063\000\000\000\067\000\
\000\000\004\000\102\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\068\000\070\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\091\000\000\000\000\000\000\000\005\000\
\000\000\000\000\000\000\021\000\000\000\000\000\000\000\000\000\
\000\000\000\000\026\000\027\000\000\000\030\000\000\000\000\000\
\000\000\000\000\083\000\090\000\000\000\000\000\088\000\000\000\
\000\000\000\000\071\000\000\000\000\000\000\000\000\000\000\000\
\072\000\078\000\079\000\080\000\081\000\082\000\101\000\000\000\
\111\000\112\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\007\000\
\006\000\000\000\000\000\000\000\000\000\000\000\031\000\033\000\
\000\000\000\000\025\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\056\000\000\000\000\000\000\000\066\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\097\000\000\000\
\000\000\000\000\000\000\108\000\008\000\000\000\046\000\053\000\
\000\000\000\000\051\000\000\000\034\000\000\000\000\000\000\000\
\000\000\000\000\035\000\041\000\042\000\043\000\044\000\045\000\
\061\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\104\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\123\000\000\000\000\000\100\000\115\000\
\000\000\000\000\022\000\000\000\000\000\000\000\000\000\057\000\
\000\000\000\000\000\000\000\000\089\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\113\000\000\000\000\000\000\000\000\000\
\058\000\000\000\000\000\000\000\000\000\093\000\107\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\126\000\000\000\
\110\000\000\000\000\000\000\000\052\000\000\000\000\000\095\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\099\000\
\000\000\000\000\000\000\000\000\103\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\117\000\118\000\119\000\
\120\000\000\000\000\000\000\000\096\000\000\000\000\000\000\000\
\000\000\000\000\000\000\121\000\122\000"

let yydgoto = "\002\000\
\003\000\004\000\013\000\030\000\039\000\050\000\040\000\065\000\
\086\000\087\000\022\000\027\000\046\000\079\000\058\000\133\000\
\134\000\060\000\136\000\080\000\081\000\211\000\172\000\173\000\
\117\000\003\001\004\001\175\000\014\001"

let yysindex = "\047\000\
\000\000\000\000\000\000\012\255\062\255\070\255\000\000\111\255\
\132\255\120\255\120\255\169\255\181\255\188\255\255\254\151\255\
\176\255\000\000\189\255\193\255\000\000\223\255\017\000\017\000\
\251\255\214\255\004\000\120\255\007\000\159\255\159\255\245\255\
\018\000\000\000\000\000\249\255\020\000\032\000\056\000\059\000\
\056\000\059\000\049\000\193\255\050\000\060\000\000\000\039\000\
\063\000\069\000\056\000\113\000\056\000\000\000\000\000\255\254\
\000\000\071\255\088\000\093\000\137\255\000\000\107\000\119\000\
\226\255\113\000\177\255\000\000\115\000\075\255\000\000\137\255\
\137\255\100\000\137\255\244\255\000\000\000\000\098\255\000\000\
\134\000\000\000\000\000\146\000\147\000\149\000\154\000\226\255\
\249\255\137\255\078\000\137\255\238\000\249\000\138\001\151\000\
\111\003\000\000\000\000\000\255\137\255\137\255\163\000\137\255\
\137\255\137\255\137\255\137\255\137\255\137\255\137\255\137\255\
\137\255\137\255\137\255\000\000\088\255\039\255\136\000\000\000\
\153\000\172\000\154\000\000\000\042\002\078\000\078\000\156\000\
\078\000\154\255\000\000\000\000\009\001\000\000\115\001\173\000\
\137\255\039\000\000\000\000\000\060\255\042\000\000\000\161\001\
\063\002\160\000\000\000\111\003\111\003\150\255\079\003\047\003\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\188\000\
\000\000\000\000\194\000\204\000\205\000\208\000\210\000\212\000\
\078\255\078\255\215\000\174\000\187\255\197\000\216\000\000\000\
\000\000\226\000\236\000\184\001\231\000\127\003\000\000\000\000\
\063\255\078\000\000\000\078\000\078\000\078\000\078\000\078\000\
\078\000\078\000\078\000\078\000\078\000\078\000\078\000\137\255\
\245\000\099\001\234\000\000\000\070\000\151\000\137\255\000\000\
\214\000\035\255\253\000\239\000\254\000\255\000\014\001\015\001\
\030\001\031\001\007\001\230\255\091\255\046\001\000\000\039\255\
\078\255\078\255\078\255\000\000\000\000\249\255\000\000\000\000\
\074\255\092\000\000\000\084\002\000\000\127\003\127\003\122\001\
\095\003\063\003\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\039\000\021\001\137\255\105\002\082\255\137\255\137\255\
\037\001\052\001\065\001\000\000\089\001\100\001\101\001\105\001\
\106\001\107\001\047\001\000\000\040\255\111\001\000\000\000\000\
\102\001\016\000\000\000\130\000\231\000\078\000\125\001\000\000\
\039\000\126\002\214\000\157\000\000\000\147\002\025\001\137\255\
\239\000\097\001\078\255\078\255\078\255\078\255\103\001\104\001\
\116\001\047\001\150\001\000\000\136\000\078\000\168\002\104\255\
\000\000\214\000\137\255\142\001\160\000\000\000\000\000\137\255\
\216\255\045\000\073\000\159\000\154\001\155\001\000\000\039\255\
\000\000\189\002\125\001\184\000\000\000\210\002\137\255\000\000\
\041\001\139\001\140\001\143\001\145\001\078\255\078\255\000\000\
\125\001\078\000\214\000\057\001\000\000\162\001\166\001\175\001\
\185\001\186\000\213\000\231\002\160\000\000\000\000\000\000\000\
\000\000\078\255\078\255\125\001\000\000\241\000\168\001\163\001\
\164\001\186\001\189\001\000\000\000\000"

let yyrindex = "\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\190\001\190\001\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\188\001\000\000\196\001\000\000\000\000\
\000\000\000\000\000\000\190\001\000\000\000\000\000\000\000\000\
\193\001\000\000\000\000\194\001\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\188\001\000\000\000\000\000\000\206\001\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\207\001\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\180\255\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\194\001\000\000\000\000\209\001\073\001\000\000\000\000\015\003\
\229\001\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\211\001\213\001\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\098\000\000\000\000\000\000\000\000\000\245\254\000\000\
\218\001\206\001\000\000\000\000\000\000\208\255\000\000\000\000\
\000\000\215\001\000\000\246\001\007\002\212\001\024\002\034\002\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\031\003\133\255\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\247\254\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\237\255\000\000\000\000\220\001\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\083\255\000\000\230\001\000\000\211\001\
\000\000\000\000\000\000\000\000\000\000\194\001\000\000\000\000\
\000\000\125\000\000\000\000\000\000\000\002\003\005\003\130\255\
\085\001\110\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\206\001\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\232\001\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\230\001\000\000\000\000\000\000\000\000\000\000\
\133\000\000\000\000\000\000\000\000\000\000\000\152\000\000\000\
\206\001\000\000\009\000\037\000\000\000\000\000\000\000\207\001\
\220\001\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\234\001\230\001\000\000\000\000\213\001\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\215\001\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\211\001\
\000\000\000\000\179\000\206\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\065\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\215\001\000\000\000\000\000\000\
\000\000\000\000\000\000\233\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000"

let yygindex = "\000\000\
\000\000\000\000\005\000\237\002\235\000\074\001\232\002\196\002\
\198\255\178\002\217\002\233\002\179\255\186\255\000\000\138\255\
\131\255\122\255\142\255\202\255\243\001\210\254\038\255\113\255\
\000\000\000\000\245\001\235\001\237\001"

let yytablesize = 1199
let yytable = "\094\000\
\181\000\095\000\097\000\204\000\099\000\015\001\072\001\180\000\
\182\000\018\000\184\000\124\000\005\000\006\000\060\000\014\000\
\059\000\096\000\060\000\125\000\059\000\135\000\203\000\019\000\
\141\000\220\000\221\000\020\000\121\000\122\000\144\000\145\000\
\035\000\147\000\148\000\149\000\150\000\151\000\152\000\153\000\
\154\000\155\000\156\000\157\000\158\000\143\000\101\001\001\000\
\021\000\142\000\161\000\162\000\163\000\164\000\165\000\166\000\
\167\000\168\000\169\000\235\000\007\000\255\000\042\001\170\000\
\178\000\043\001\202\000\236\000\000\001\237\000\238\000\239\000\
\240\000\241\000\242\000\243\000\244\000\245\000\246\000\247\000\
\248\000\016\001\017\001\018\001\141\000\249\000\206\000\233\000\
\171\000\161\000\162\000\163\000\164\000\165\000\166\000\167\000\
\168\000\169\000\233\000\072\000\068\000\080\001\170\000\092\000\
\114\000\114\000\141\000\021\001\114\000\205\000\073\000\008\000\
\234\000\074\000\075\000\024\001\012\001\159\000\103\000\009\000\
\069\000\225\000\226\000\020\001\093\000\077\000\078\000\219\000\
\233\000\135\000\104\000\028\001\105\000\106\000\107\000\010\000\
\253\000\160\000\108\000\109\000\110\000\111\000\112\000\113\000\
\114\000\115\000\049\001\057\001\058\001\059\001\060\001\040\000\
\019\001\068\001\032\000\040\000\011\000\040\000\032\000\047\001\
\032\000\072\000\037\000\038\000\040\000\040\000\040\000\032\000\
\032\000\012\000\040\000\040\000\073\000\032\000\032\000\074\000\
\075\000\185\000\069\001\023\000\186\000\026\001\104\000\066\001\
\030\001\031\001\076\000\077\000\078\000\015\000\090\001\091\001\
\110\000\111\000\112\000\113\000\114\000\115\000\089\000\029\001\
\064\000\064\000\064\000\090\000\024\000\064\000\016\000\064\000\
\224\000\064\000\102\001\103\001\064\000\017\000\064\000\064\000\
\064\000\225\000\226\000\092\001\064\000\064\000\064\000\064\000\
\064\000\064\000\064\000\064\000\084\000\084\000\084\000\026\000\
\084\000\084\000\085\000\084\000\070\001\084\000\074\001\025\000\
\084\000\073\001\084\000\084\000\084\000\028\000\225\000\226\000\
\084\000\084\000\084\000\084\000\084\000\084\000\084\000\084\000\
\084\001\065\000\065\000\065\000\225\000\226\000\065\000\033\000\
\065\000\041\000\065\000\100\000\101\000\065\000\102\000\065\000\
\065\000\065\000\051\000\029\000\053\000\065\000\065\000\065\000\
\065\000\065\000\065\000\065\000\065\000\086\000\086\000\086\000\
\032\000\034\000\086\000\036\000\086\000\045\001\086\000\043\000\
\044\000\086\000\045\000\086\000\086\000\086\000\225\000\226\000\
\047\000\086\000\086\000\086\000\086\000\086\000\086\000\086\000\
\086\000\085\000\085\000\085\000\048\000\049\000\085\000\038\000\
\085\000\100\000\085\000\075\001\207\000\085\000\056\000\085\000\
\085\000\085\000\054\000\225\000\226\000\085\000\085\000\085\000\
\085\000\085\000\085\000\085\000\085\000\087\000\087\000\087\000\
\059\000\057\000\087\000\061\000\087\000\100\000\087\000\076\001\
\252\000\087\000\062\000\087\000\087\000\087\000\126\000\225\000\
\226\000\087\000\087\000\087\000\087\000\087\000\087\000\087\000\
\087\000\127\000\052\000\185\000\128\000\129\000\022\001\028\000\
\064\000\070\000\071\000\028\000\063\000\028\000\066\000\130\000\
\131\000\132\000\028\000\037\000\028\000\028\000\028\000\037\000\
\082\000\037\000\028\000\028\000\028\000\028\000\028\000\028\000\
\028\000\028\000\047\000\083\000\091\000\098\000\047\000\037\000\
\047\000\185\000\116\000\116\000\046\001\047\000\116\000\047\000\
\047\000\047\000\085\000\116\000\116\000\047\000\047\000\047\000\
\047\000\047\000\047\000\047\000\047\000\029\000\118\000\119\000\
\140\000\029\000\120\000\029\000\100\000\077\001\176\000\051\001\
\029\000\174\000\029\000\029\000\029\000\225\000\226\000\146\000\
\029\000\029\000\029\000\029\000\029\000\029\000\029\000\029\000\
\049\000\177\000\201\000\223\000\049\000\183\000\049\000\185\000\
\098\001\210\000\082\001\049\000\212\000\049\000\049\000\049\000\
\225\000\226\000\213\000\049\000\049\000\049\000\049\000\049\000\
\049\000\049\000\049\000\048\000\214\000\215\000\227\000\048\000\
\216\000\048\000\217\000\099\001\218\000\254\000\048\000\222\000\
\048\000\048\000\048\000\225\000\226\000\228\000\048\000\048\000\
\048\000\048\000\048\000\048\000\048\000\048\000\050\000\229\000\
\232\000\230\000\050\000\251\000\050\000\100\000\137\000\104\001\
\102\000\050\000\250\000\050\000\050\000\050\000\138\000\225\000\
\226\000\050\000\050\000\050\000\050\000\050\000\050\000\050\000\
\050\000\104\000\001\001\105\000\106\000\107\000\187\000\011\001\
\002\001\108\000\109\000\110\000\111\000\112\000\113\000\114\000\
\115\000\188\000\025\001\189\000\190\000\191\000\053\001\005\001\
\006\001\192\000\193\000\194\000\195\000\196\000\197\000\198\000\
\199\000\104\000\032\001\105\000\106\000\107\000\085\001\007\001\
\008\001\108\000\109\000\110\000\111\000\112\000\113\000\114\000\
\115\000\104\000\033\001\105\000\106\000\107\000\093\001\009\001\
\010\001\108\000\109\000\110\000\111\000\112\000\113\000\114\000\
\115\000\104\000\034\001\105\000\106\000\107\000\064\000\013\001\
\041\001\108\000\109\000\110\000\111\000\112\000\113\000\114\000\
\115\000\064\000\036\000\064\000\064\000\064\000\036\000\035\001\
\036\000\064\000\064\000\064\000\064\000\064\000\064\000\064\000\
\064\000\200\000\036\001\037\001\208\000\036\000\036\000\038\001\
\039\001\040\001\056\001\104\000\225\000\105\000\106\000\107\000\
\044\001\200\000\042\001\108\000\109\000\110\000\111\000\112\000\
\113\000\114\000\115\000\104\000\048\001\105\000\106\000\107\000\
\061\001\062\001\188\000\108\000\109\000\110\000\111\000\112\000\
\113\000\114\000\115\000\139\000\194\000\195\000\196\000\197\000\
\198\000\199\000\104\000\064\001\105\000\106\000\107\000\071\001\
\078\001\079\001\108\000\109\000\110\000\111\000\112\000\113\000\
\114\000\115\000\208\000\094\001\086\001\087\001\105\001\095\001\
\088\001\104\000\089\001\105\000\106\000\107\000\225\000\226\000\
\096\001\108\000\109\000\110\000\111\000\112\000\113\000\114\000\
\115\000\231\000\097\001\108\001\106\001\107\001\109\001\009\000\
\188\000\016\000\189\000\190\000\191\000\010\000\017\000\020\000\
\192\000\193\000\194\000\195\000\196\000\197\000\198\000\199\000\
\077\000\077\000\077\000\055\000\092\000\077\000\059\000\077\000\
\098\000\077\000\109\000\059\000\094\000\105\000\077\000\077\000\
\077\000\069\000\069\000\069\000\077\000\077\000\069\000\124\000\
\069\000\106\000\069\000\125\000\031\000\088\000\042\000\069\000\
\069\000\123\000\075\000\075\000\075\000\069\000\069\000\075\000\
\067\000\075\000\054\001\075\000\055\000\055\001\063\001\065\001\
\075\000\075\000\000\000\076\000\076\000\076\000\075\000\075\000\
\076\000\000\000\076\000\000\000\076\000\000\000\000\000\000\000\
\000\000\076\000\076\000\000\000\073\000\073\000\073\000\076\000\
\076\000\073\000\000\000\073\000\000\000\073\000\074\000\074\000\
\074\000\000\000\000\000\074\000\000\000\074\000\000\000\074\000\
\073\000\073\000\000\000\000\000\000\000\179\000\000\000\000\000\
\000\000\000\000\104\000\074\000\105\000\106\000\107\000\000\000\
\000\000\000\000\108\000\109\000\110\000\111\000\112\000\113\000\
\114\000\115\000\209\000\000\000\000\000\000\000\000\000\104\000\
\000\000\105\000\106\000\107\000\000\000\000\000\000\000\108\000\
\109\000\110\000\111\000\112\000\113\000\114\000\115\000\023\001\
\000\000\000\000\000\000\000\000\188\000\000\000\189\000\190\000\
\191\000\000\000\000\000\000\000\192\000\193\000\194\000\195\000\
\196\000\197\000\198\000\199\000\027\001\000\000\000\000\000\000\
\000\000\104\000\000\000\105\000\106\000\107\000\000\000\000\000\
\000\000\108\000\109\000\110\000\111\000\112\000\113\000\114\000\
\115\000\050\001\000\000\000\000\000\000\000\000\104\000\000\000\
\105\000\106\000\107\000\000\000\000\000\000\000\108\000\109\000\
\110\000\111\000\112\000\113\000\114\000\115\000\052\001\000\000\
\000\000\000\000\000\000\104\000\000\000\105\000\106\000\107\000\
\000\000\000\000\000\000\108\000\109\000\110\000\111\000\112\000\
\113\000\114\000\115\000\067\001\000\000\000\000\000\000\000\000\
\188\000\000\000\189\000\190\000\191\000\000\000\000\000\000\000\
\192\000\193\000\194\000\195\000\196\000\197\000\198\000\199\000\
\081\001\000\000\000\000\000\000\000\000\188\000\000\000\189\000\
\190\000\191\000\000\000\000\000\000\000\192\000\193\000\194\000\
\195\000\196\000\197\000\198\000\199\000\083\001\000\000\000\000\
\000\000\000\000\104\000\000\000\105\000\106\000\107\000\000\000\
\000\000\000\000\108\000\109\000\110\000\111\000\112\000\113\000\
\114\000\115\000\100\001\000\000\000\000\000\000\000\000\188\000\
\000\000\189\000\190\000\191\000\000\000\000\000\000\000\192\000\
\193\000\194\000\195\000\196\000\197\000\198\000\199\000\038\000\
\000\000\000\000\039\000\038\000\000\000\038\000\039\000\000\000\
\039\000\000\000\000\000\000\000\038\000\038\000\000\000\039\000\
\039\000\000\000\038\000\038\000\000\000\039\000\039\000\067\000\
\000\000\067\000\067\000\067\000\000\000\000\000\000\000\067\000\
\067\000\067\000\067\000\067\000\067\000\067\000\067\000\030\000\
\000\000\030\000\030\000\030\000\000\000\000\000\000\000\030\000\
\030\000\030\000\030\000\030\000\030\000\030\000\030\000\104\000\
\000\000\105\000\106\000\107\000\000\000\000\000\000\000\108\000\
\000\000\110\000\111\000\112\000\113\000\114\000\115\000\188\000\
\000\000\189\000\190\000\191\000\000\000\000\000\000\000\192\000\
\000\000\194\000\195\000\196\000\197\000\198\000\199\000\104\000\
\000\000\105\000\106\000\107\000\000\000\000\000\000\000\000\000\
\000\000\110\000\111\000\112\000\113\000\114\000\115\000\188\000\
\000\000\189\000\190\000\191\000\000\000\000\000\000\000\000\000\
\000\000\194\000\195\000\196\000\197\000\198\000\199\000\104\000\
\000\000\000\000\000\000\107\000\000\000\000\000\000\000\000\000\
\000\000\110\000\111\000\112\000\113\000\114\000\115\000\188\000\
\000\000\000\000\000\000\191\000\000\000\000\000\000\000\000\000\
\000\000\194\000\195\000\196\000\197\000\198\000\199\000"

let yycheck = "\070\000\
\126\000\072\000\073\000\138\000\075\000\224\000\053\001\126\000\
\127\000\011\001\129\000\089\000\001\001\002\001\026\001\011\000\
\026\001\072\000\030\001\090\000\030\001\092\000\137\000\025\001\
\025\001\169\000\170\000\029\001\087\000\088\000\101\000\102\000\
\028\000\104\000\105\000\106\000\107\000\108\000\109\000\110\000\
\111\000\112\000\113\000\114\000\115\000\100\000\093\001\001\000\
\050\001\050\001\012\001\013\001\014\001\015\001\016\001\017\001\
\018\001\019\001\020\001\185\000\049\001\027\001\023\001\025\001\
\123\000\026\001\137\000\186\000\034\001\188\000\189\000\190\000\
\191\000\192\000\193\000\194\000\195\000\196\000\197\000\198\000\
\199\000\225\000\226\000\227\000\025\001\200\000\141\000\025\001\
\050\001\012\001\013\001\014\001\015\001\016\001\017\001\018\001\
\019\001\020\001\025\001\025\001\030\001\064\001\025\001\029\001\
\022\001\023\001\025\001\233\000\026\001\050\001\036\001\050\001\
\050\001\039\001\040\001\250\000\026\001\030\001\021\001\050\001\
\050\001\031\001\032\001\050\001\050\001\051\001\052\001\050\001\
\025\001\200\000\033\001\050\001\035\001\036\001\037\001\025\001\
\207\000\050\001\041\001\042\001\043\001\044\001\045\001\046\001\
\047\001\048\001\025\001\035\001\036\001\037\001\038\001\022\001\
\230\000\050\001\022\001\026\001\025\001\028\001\026\001\022\001\
\028\001\025\001\004\001\005\001\035\001\036\001\037\001\035\001\
\036\001\050\001\041\001\042\001\036\001\041\001\042\001\039\001\
\040\001\024\001\048\001\029\001\027\001\252\000\033\001\046\001\
\255\000\000\001\050\001\051\001\052\001\021\001\078\001\079\001\
\043\001\044\001\045\001\046\001\047\001\048\001\022\001\254\000\
\021\001\022\001\023\001\027\001\029\001\026\001\026\001\028\001\
\022\001\030\001\098\001\099\001\033\001\026\001\035\001\036\001\
\037\001\031\001\032\001\082\001\041\001\042\001\043\001\044\001\
\045\001\046\001\047\001\048\001\021\001\022\001\023\001\039\001\
\007\001\026\001\009\001\028\001\051\001\030\001\023\001\051\001\
\033\001\056\001\035\001\036\001\037\001\023\001\031\001\032\001\
\041\001\042\001\043\001\044\001\045\001\046\001\047\001\048\001\
\071\001\021\001\022\001\023\001\031\001\032\001\026\001\050\001\
\028\001\031\000\030\001\024\001\025\001\033\001\027\001\035\001\
\036\001\037\001\040\000\003\001\042\000\041\001\042\001\043\001\
\044\001\045\001\046\001\047\001\048\001\021\001\022\001\023\001\
\038\001\030\001\026\001\029\001\028\001\022\001\030\001\051\001\
\023\001\033\001\050\001\035\001\036\001\037\001\031\001\032\001\
\029\001\041\001\042\001\043\001\044\001\045\001\046\001\047\001\
\048\001\021\001\022\001\023\001\029\001\006\001\026\001\005\001\
\028\001\024\001\030\001\023\001\027\001\033\001\021\001\035\001\
\036\001\037\001\026\001\031\001\032\001\041\001\042\001\043\001\
\044\001\045\001\046\001\047\001\048\001\021\001\022\001\023\001\
\050\001\030\001\026\001\029\001\028\001\024\001\030\001\023\001\
\027\001\033\001\030\001\035\001\036\001\037\001\025\001\031\001\
\032\001\041\001\042\001\043\001\044\001\045\001\046\001\047\001\
\048\001\036\001\041\000\024\001\039\001\040\001\027\001\022\001\
\008\001\034\001\030\001\026\001\051\000\028\001\053\000\050\001\
\051\001\052\001\033\001\022\001\035\001\036\001\037\001\026\001\
\030\001\028\001\041\001\042\001\043\001\044\001\045\001\046\001\
\047\001\048\001\022\001\029\001\034\001\050\001\026\001\042\001\
\028\001\024\001\022\001\023\001\027\001\033\001\026\001\035\001\
\036\001\037\001\009\001\030\001\032\001\041\001\042\001\043\001\
\044\001\045\001\046\001\047\001\048\001\022\001\029\001\029\001\
\026\001\026\001\030\001\028\001\024\001\023\001\030\001\027\001\
\033\001\050\001\035\001\036\001\037\001\031\001\032\001\029\001\
\041\001\042\001\043\001\044\001\045\001\046\001\047\001\048\001\
\022\001\030\001\030\001\030\001\026\001\050\001\028\001\024\001\
\023\001\050\001\027\001\033\001\025\001\035\001\036\001\037\001\
\031\001\032\001\025\001\041\001\042\001\043\001\044\001\045\001\
\046\001\047\001\048\001\022\001\025\001\025\001\034\001\026\001\
\025\001\028\001\025\001\023\001\025\001\024\001\033\001\025\001\
\035\001\036\001\037\001\031\001\032\001\030\001\041\001\042\001\
\043\001\044\001\045\001\046\001\047\001\048\001\022\001\030\001\
\026\001\022\001\026\001\026\001\028\001\024\001\025\001\023\001\
\027\001\033\001\022\001\035\001\036\001\037\001\022\001\031\001\
\032\001\041\001\042\001\043\001\044\001\045\001\046\001\047\001\
\048\001\033\001\030\001\035\001\036\001\037\001\022\001\025\001\
\050\001\041\001\042\001\043\001\044\001\045\001\046\001\047\001\
\048\001\033\001\022\001\035\001\036\001\037\001\022\001\050\001\
\050\001\041\001\042\001\043\001\044\001\045\001\046\001\047\001\
\048\001\033\001\022\001\035\001\036\001\037\001\022\001\050\001\
\050\001\041\001\042\001\043\001\044\001\045\001\046\001\047\001\
\048\001\033\001\023\001\035\001\036\001\037\001\022\001\050\001\
\050\001\041\001\042\001\043\001\044\001\045\001\046\001\047\001\
\048\001\033\001\026\001\035\001\036\001\037\001\022\001\050\001\
\050\001\041\001\042\001\043\001\044\001\045\001\046\001\047\001\
\048\001\033\001\022\001\035\001\036\001\037\001\026\001\023\001\
\028\001\041\001\042\001\043\001\044\001\045\001\046\001\047\001\
\048\001\023\001\023\001\023\001\026\001\041\001\042\001\023\001\
\023\001\023\001\034\001\033\001\031\001\035\001\036\001\037\001\
\026\001\023\001\023\001\041\001\042\001\043\001\044\001\045\001\
\046\001\047\001\048\001\033\001\024\001\035\001\036\001\037\001\
\050\001\050\001\033\001\041\001\042\001\043\001\044\001\045\001\
\046\001\047\001\048\001\026\001\043\001\044\001\045\001\046\001\
\047\001\048\001\033\001\022\001\035\001\036\001\037\001\034\001\
\023\001\023\001\041\001\042\001\043\001\044\001\045\001\046\001\
\047\001\048\001\026\001\026\001\050\001\050\001\023\001\026\001\
\050\001\033\001\050\001\035\001\036\001\037\001\031\001\032\001\
\026\001\041\001\042\001\043\001\044\001\045\001\046\001\047\001\
\048\001\026\001\026\001\026\001\050\001\050\001\026\001\026\001\
\033\001\030\001\035\001\036\001\037\001\026\001\030\001\030\001\
\041\001\042\001\043\001\044\001\045\001\046\001\047\001\048\001\
\021\001\022\001\023\001\030\001\030\001\026\001\030\001\028\001\
\030\001\030\001\030\001\026\001\030\001\026\001\035\001\036\001\
\037\001\021\001\022\001\023\001\041\001\042\001\026\001\026\001\
\028\001\026\001\030\001\026\001\024\000\066\000\031\000\035\001\
\036\001\088\000\021\001\022\001\023\001\041\001\042\001\026\001\
\056\000\028\001\032\001\030\001\044\000\033\001\042\001\045\001\
\035\001\036\001\255\255\021\001\022\001\023\001\041\001\042\001\
\026\001\255\255\028\001\255\255\030\001\255\255\255\255\255\255\
\255\255\035\001\036\001\255\255\021\001\022\001\023\001\041\001\
\042\001\026\001\255\255\028\001\255\255\030\001\021\001\022\001\
\023\001\255\255\255\255\026\001\255\255\028\001\255\255\030\001\
\041\001\042\001\255\255\255\255\255\255\028\001\255\255\255\255\
\255\255\255\255\033\001\042\001\035\001\036\001\037\001\255\255\
\255\255\255\255\041\001\042\001\043\001\044\001\045\001\046\001\
\047\001\048\001\028\001\255\255\255\255\255\255\255\255\033\001\
\255\255\035\001\036\001\037\001\255\255\255\255\255\255\041\001\
\042\001\043\001\044\001\045\001\046\001\047\001\048\001\028\001\
\255\255\255\255\255\255\255\255\033\001\255\255\035\001\036\001\
\037\001\255\255\255\255\255\255\041\001\042\001\043\001\044\001\
\045\001\046\001\047\001\048\001\028\001\255\255\255\255\255\255\
\255\255\033\001\255\255\035\001\036\001\037\001\255\255\255\255\
\255\255\041\001\042\001\043\001\044\001\045\001\046\001\047\001\
\048\001\028\001\255\255\255\255\255\255\255\255\033\001\255\255\
\035\001\036\001\037\001\255\255\255\255\255\255\041\001\042\001\
\043\001\044\001\045\001\046\001\047\001\048\001\028\001\255\255\
\255\255\255\255\255\255\033\001\255\255\035\001\036\001\037\001\
\255\255\255\255\255\255\041\001\042\001\043\001\044\001\045\001\
\046\001\047\001\048\001\028\001\255\255\255\255\255\255\255\255\
\033\001\255\255\035\001\036\001\037\001\255\255\255\255\255\255\
\041\001\042\001\043\001\044\001\045\001\046\001\047\001\048\001\
\028\001\255\255\255\255\255\255\255\255\033\001\255\255\035\001\
\036\001\037\001\255\255\255\255\255\255\041\001\042\001\043\001\
\044\001\045\001\046\001\047\001\048\001\028\001\255\255\255\255\
\255\255\255\255\033\001\255\255\035\001\036\001\037\001\255\255\
\255\255\255\255\041\001\042\001\043\001\044\001\045\001\046\001\
\047\001\048\001\028\001\255\255\255\255\255\255\255\255\033\001\
\255\255\035\001\036\001\037\001\255\255\255\255\255\255\041\001\
\042\001\043\001\044\001\045\001\046\001\047\001\048\001\022\001\
\255\255\255\255\022\001\026\001\255\255\028\001\026\001\255\255\
\028\001\255\255\255\255\255\255\035\001\036\001\255\255\035\001\
\036\001\255\255\041\001\042\001\255\255\041\001\042\001\033\001\
\255\255\035\001\036\001\037\001\255\255\255\255\255\255\041\001\
\042\001\043\001\044\001\045\001\046\001\047\001\048\001\033\001\
\255\255\035\001\036\001\037\001\255\255\255\255\255\255\041\001\
\042\001\043\001\044\001\045\001\046\001\047\001\048\001\033\001\
\255\255\035\001\036\001\037\001\255\255\255\255\255\255\041\001\
\255\255\043\001\044\001\045\001\046\001\047\001\048\001\033\001\
\255\255\035\001\036\001\037\001\255\255\255\255\255\255\041\001\
\255\255\043\001\044\001\045\001\046\001\047\001\048\001\033\001\
\255\255\035\001\036\001\037\001\255\255\255\255\255\255\255\255\
\255\255\043\001\044\001\045\001\046\001\047\001\048\001\033\001\
\255\255\035\001\036\001\037\001\255\255\255\255\255\255\255\255\
\255\255\043\001\044\001\045\001\046\001\047\001\048\001\033\001\
\255\255\255\255\255\255\037\001\255\255\255\255\255\255\255\255\
\255\255\043\001\044\001\045\001\046\001\047\001\048\001\033\001\
\255\255\255\255\255\255\037\001\255\255\255\255\255\255\255\255\
\255\255\043\001\044\001\045\001\046\001\047\001\048\001"

let yynames_const = "\
  Module\000\
  Model\000\
  Var\000\
  Define\000\
  Init\000\
  Transition\000\
  Fairness\000\
  Atomic\000\
  Spec\000\
  Int\000\
  Bool\000\
  Top\000\
  Bottom\000\
  AX\000\
  EX\000\
  AF\000\
  EG\000\
  AR\000\
  EU\000\
  Neg\000\
  Colon\000\
  Semicolon\000\
  Comma\000\
  Dot\000\
  LB1\000\
  RB1\000\
  LB2\000\
  RB2\000\
  LB3\000\
  RB3\000\
  And\000\
  Or\000\
  Equal\000\
  Assigno\000\
  Add\000\
  Minus\000\
  Mult\000\
  DotDot\000\
  Scalar\000\
  Nego\000\
  Ando\000\
  Oro\000\
  Non_equal\000\
  Mod\000\
  LT\000\
  GT\000\
  LE\000\
  GE\000\
  File_end\000\
  "

let yynames_block = "\
  Id\000\
  I\000\
  B\000\
  "

let yyact = [|
  (fun _ -> failwith "parser")
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'inputs) in
    Obj.repr(
# 144 "parser.mly"
                       ((module_tbl, !modl))
# 796 "parser.ml"
               : (((string, Modul.modul0) Hashtbl.t) * Modul.modul0)))
; (fun __caml_parser_env ->
    Obj.repr(
# 148 "parser.mly"
                     ()
# 802 "parser.ml"
               : 'inputs))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 10 : 'inputs) in
    let _3 = (Parsing.peek_val __caml_parser_env 8 : string) in
    let _5 = (Parsing.peek_val __caml_parser_env 6 : 'parameters) in
    let _8 = (Parsing.peek_val __caml_parser_env 3 : 'var_decl) in
    let _9 = (Parsing.peek_val __caml_parser_env 2 : 'init_decl) in
    let _10 = (Parsing.peek_val __caml_parser_env 1 : 'trans_decl) in
    Obj.repr(
# 150 "parser.mly"
       (tmp_parameter_list := _5; 
	Hashtbl.add module_tbl _3 
	  {name = _3;
	   parameter_list = !tmp_parameter_list;
	   var_list = !tmp_var_list;
	   symbol_tbl = Hashtbl.create 0;
	   init_assign = !tmp_init_assign;
	   transitions = !tmp_transitions; 
	   fairness = [];
	   atomic_tbl = !tmp_atomic_tbl;
	   spec_list = !tmp_spec_list
	  };
	clear_tmps ())
# 826 "parser.ml"
               : 'inputs))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 11 : 'inputs) in
    let _3 = (Parsing.peek_val __caml_parser_env 9 : string) in
    let _5 = (Parsing.peek_val __caml_parser_env 7 : 'parameters) in
    let _8 = (Parsing.peek_val __caml_parser_env 4 : 'var_decl) in
    let _9 = (Parsing.peek_val __caml_parser_env 3 : 'symbol_decl) in
    let _10 = (Parsing.peek_val __caml_parser_env 2 : 'init_decl) in
    let _11 = (Parsing.peek_val __caml_parser_env 1 : 'trans_decl) in
    Obj.repr(
# 164 "parser.mly"
       (tmp_parameter_list := _5;
	Hashtbl.add module_tbl _3 
	  {name = _3;
	   parameter_list = !tmp_parameter_list;
	   var_list = !tmp_var_list;
	   symbol_tbl = !tmp_symbol_tbl; 
	   init_assign = !tmp_init_assign;
	   transitions = !tmp_transitions;
	   fairness = [];
	   atomic_tbl = !tmp_atomic_tbl;
	   spec_list = !tmp_spec_list
	  }; 
	clear_tmps ())
# 851 "parser.ml"
               : 'inputs))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 12 : 'inputs) in
    let _3 = (Parsing.peek_val __caml_parser_env 10 : string) in
    let _5 = (Parsing.peek_val __caml_parser_env 8 : 'parameters) in
    let _8 = (Parsing.peek_val __caml_parser_env 5 : 'var_decl) in
    let _9 = (Parsing.peek_val __caml_parser_env 4 : 'init_decl) in
    let _10 = (Parsing.peek_val __caml_parser_env 3 : 'trans_decl) in
    let _11 = (Parsing.peek_val __caml_parser_env 2 : 'atomic_decl) in
    let _12 = (Parsing.peek_val __caml_parser_env 1 : 'spec_decl) in
    Obj.repr(
# 178 "parser.mly"
       (tmp_parameter_list := _5; 
	modl := {name = _3;
		 parameter_list = !tmp_parameter_list;
		 var_list = !tmp_var_list;
		 symbol_tbl = Hashtbl.create 0;
		 init_assign = !tmp_init_assign;
		 transitions = !tmp_transitions;
		 fairness = [];
		 atomic_tbl = !tmp_atomic_tbl;
		 spec_list = !tmp_spec_list
		}; (*Hashtbl.add module_tbl $3 !modl;*)
	clear_tmps ())
# 876 "parser.ml"
               : 'inputs))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 13 : 'inputs) in
    let _3 = (Parsing.peek_val __caml_parser_env 11 : string) in
    let _5 = (Parsing.peek_val __caml_parser_env 9 : 'parameters) in
    let _8 = (Parsing.peek_val __caml_parser_env 6 : 'var_decl) in
    let _9 = (Parsing.peek_val __caml_parser_env 5 : 'symbol_decl) in
    let _10 = (Parsing.peek_val __caml_parser_env 4 : 'init_decl) in
    let _11 = (Parsing.peek_val __caml_parser_env 3 : 'trans_decl) in
    let _12 = (Parsing.peek_val __caml_parser_env 2 : 'atomic_decl) in
    let _13 = (Parsing.peek_val __caml_parser_env 1 : 'spec_decl) in
    Obj.repr(
# 191 "parser.mly"
       (tmp_parameter_list := _5;
	modl := {name = _3;
		 parameter_list = !tmp_parameter_list;
		 var_list = !tmp_var_list; 
		 symbol_tbl = !tmp_symbol_tbl; 
		 init_assign = !tmp_init_assign;
		 transitions = !tmp_transitions; 
		 fairness = [];
		 atomic_tbl = !tmp_atomic_tbl;
		 spec_list = !tmp_spec_list
		}; (*Hashtbl.add module_tbl $3 !modl;*)
	clear_tmps ())
# 902 "parser.ml"
               : 'inputs))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 13 : 'inputs) in
    let _3 = (Parsing.peek_val __caml_parser_env 11 : string) in
    let _5 = (Parsing.peek_val __caml_parser_env 9 : 'parameters) in
    let _8 = (Parsing.peek_val __caml_parser_env 6 : 'var_decl) in
    let _9 = (Parsing.peek_val __caml_parser_env 5 : 'init_decl) in
    let _10 = (Parsing.peek_val __caml_parser_env 4 : 'trans_decl) in
    let _11 = (Parsing.peek_val __caml_parser_env 3 : 'atomic_decl) in
    let _12 = (Parsing.peek_val __caml_parser_env 2 : 'fairness_decl) in
    let _13 = (Parsing.peek_val __caml_parser_env 1 : 'spec_decl) in
    Obj.repr(
# 204 "parser.mly"
       (tmp_parameter_list := _5; 
	modl := {name = _3;
		 parameter_list = !tmp_parameter_list;
		 var_list = !tmp_var_list;
		 symbol_tbl = Hashtbl.create 0;
		 init_assign = !tmp_init_assign;
		 transitions = !tmp_transitions;
		 fairness = !tmp_fairness;
		 atomic_tbl = !tmp_atomic_tbl;
		 spec_list = !tmp_spec_list
		}; (*Hashtbl.add module_tbl $3 !modl;*)
	clear_tmps ())
# 928 "parser.ml"
               : 'inputs))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 14 : 'inputs) in
    let _3 = (Parsing.peek_val __caml_parser_env 12 : string) in
    let _5 = (Parsing.peek_val __caml_parser_env 10 : 'parameters) in
    let _8 = (Parsing.peek_val __caml_parser_env 7 : 'var_decl) in
    let _9 = (Parsing.peek_val __caml_parser_env 6 : 'symbol_decl) in
    let _10 = (Parsing.peek_val __caml_parser_env 5 : 'init_decl) in
    let _11 = (Parsing.peek_val __caml_parser_env 4 : 'trans_decl) in
    let _12 = (Parsing.peek_val __caml_parser_env 3 : 'atomic_decl) in
    let _13 = (Parsing.peek_val __caml_parser_env 2 : 'fairness_decl) in
    let _14 = (Parsing.peek_val __caml_parser_env 1 : 'spec_decl) in
    Obj.repr(
# 217 "parser.mly"
       (tmp_parameter_list := _5;
	modl := {name = _3;
		 parameter_list = !tmp_parameter_list;
		 var_list = !tmp_var_list; 
		 symbol_tbl = !tmp_symbol_tbl; 
		 init_assign = !tmp_init_assign;
		 transitions = !tmp_transitions; 
		 fairness = !tmp_fairness;
		 atomic_tbl = !tmp_atomic_tbl;
		 spec_list = !tmp_spec_list
		}; (*Hashtbl.add module_tbl $3 !modl;*)
	clear_tmps ())
# 955 "parser.ml"
               : 'inputs))
; (fun __caml_parser_env ->
    Obj.repr(
# 232 "parser.mly"
                    ([])
# 961 "parser.ml"
               : 'parameters))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr_type) in
    Obj.repr(
# 233 "parser.mly"
                        ([(_1, _3)])
# 969 "parser.ml"
               : 'parameters))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 4 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 2 : 'expr_type) in
    let _5 = (Parsing.peek_val __caml_parser_env 0 : 'parameters) in
    Obj.repr(
# 234 "parser.mly"
                                         ((_1, _3)::_5)
# 978 "parser.ml"
               : 'parameters))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 3 : int) in
    let _4 = (Parsing.peek_val __caml_parser_env 1 : int) in
    Obj.repr(
# 238 "parser.mly"
                        (Int_type (_2, _4))
# 986 "parser.ml"
               : 'expr_type))
; (fun __caml_parser_env ->
    Obj.repr(
# 239 "parser.mly"
          (Bool_type)
# 992 "parser.ml"
               : 'expr_type))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'scalars) in
    Obj.repr(
# 240 "parser.mly"
                     (Scalar_type _2)
# 999 "parser.ml"
               : 'expr_type))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 242 "parser.mly"
       (try
	  (let m = Hashtbl.find module_tbl _1 in (Module_type m.name))
	 with Not_found -> (print_endline ("module "^(_1)^" is not defined."); exit 1))
# 1008 "parser.ml"
               : 'expr_type))
; (fun __caml_parser_env ->
    Obj.repr(
# 248 "parser.mly"
     ([])
# 1014 "parser.ml"
               : 'scalars))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 249 "parser.mly"
               ([_2])
# 1021 "parser.ml"
               : 'scalars))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 2 : string) in
    let _4 = (Parsing.peek_val __caml_parser_env 0 : 'scalars) in
    Obj.repr(
# 250 "parser.mly"
                             (_2 :: _4)
# 1029 "parser.ml"
               : 'scalars))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 1 : 'vars) in
    Obj.repr(
# 253 "parser.mly"
                           (tmp_var_list := _3)
# 1036 "parser.ml"
               : 'var_decl))
; (fun __caml_parser_env ->
    Obj.repr(
# 256 "parser.mly"
       ([])
# 1042 "parser.ml"
               : 'vars))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 4 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 2 : 'expr_type) in
    let _5 = (Parsing.peek_val __caml_parser_env 0 : 'vars) in
    Obj.repr(
# 257 "parser.mly"
                                     ((_1, _3)::_5)
# 1051 "parser.ml"
               : 'vars))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 7 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 5 : 'expr_type) in
    let _5 = (Parsing.peek_val __caml_parser_env 3 : 'exp) in
    let _8 = (Parsing.peek_val __caml_parser_env 0 : 'vars) in
    Obj.repr(
# 258 "parser.mly"
                                                 ((_1, Array_type (_3, _5)) :: _8)
# 1061 "parser.ml"
               : 'vars))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 1 : 'symbols) in
    Obj.repr(
# 268 "parser.mly"
                                    ()
# 1068 "parser.ml"
               : 'symbol_decl))
; (fun __caml_parser_env ->
    Obj.repr(
# 277 "parser.mly"
          ()
# 1074 "parser.ml"
               : 'symbols))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 4 : 'symbols) in
    let _2 = (Parsing.peek_val __caml_parser_env 3 : string) in
    let _4 = (Parsing.peek_val __caml_parser_env 1 : 'dexp) in
    Obj.repr(
# 278 "parser.mly"
                                     (Hashtbl.add !tmp_symbol_tbl _2 _4)
# 1083 "parser.ml"
               : 'symbols))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : int) in
    Obj.repr(
# 282 "parser.mly"
     (Const _1)
# 1090 "parser.ml"
               : 'dexp))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : bool) in
    Obj.repr(
# 283 "parser.mly"
     (Const (if _1 then 1 else 0))
# 1097 "parser.ml"
               : 'dexp))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 284 "parser.mly"
      (Vars _1)
# 1104 "parser.ml"
               : 'dexp))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : 'dexp) in
    Obj.repr(
# 285 "parser.mly"
                   (Vars_index (_1, _3))
# 1112 "parser.ml"
               : 'dexp))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'dnested_var) in
    Obj.repr(
# 294 "parser.mly"
                (_1)
# 1119 "parser.ml"
               : 'dexp))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 296 "parser.mly"
     (let i = find_scalar_position _2 !tmp_var_list in 
	     (if i = -1 then (print_endline ("unknown type for "^_2); exit 1)
	      else Const i))
# 1128 "parser.ml"
               : 'dexp))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'dexp) in
    Obj.repr(
# 299 "parser.mly"
              (Negi _2)
# 1135 "parser.ml"
               : 'dexp))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'dexp) in
    Obj.repr(
# 300 "parser.mly"
             (Negb _2)
# 1142 "parser.ml"
               : 'dexp))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'dexp) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'dexp) in
    Obj.repr(
# 301 "parser.mly"
                   (Equal (_1, _3))
# 1150 "parser.ml"
               : 'dexp))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'dexp) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'dexp) in
    Obj.repr(
# 302 "parser.mly"
                       (Negb (Equal (_1, _3)))
# 1158 "parser.ml"
               : 'dexp))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'dexp) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'dexp) in
    Obj.repr(
# 303 "parser.mly"
                  (Ando (_1, _3))
# 1166 "parser.ml"
               : 'dexp))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'dexp) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'dexp) in
    Obj.repr(
# 304 "parser.mly"
                  (Oro (_1, _3))
# 1174 "parser.ml"
               : 'dexp))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'dexp) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'dexp) in
    Obj.repr(
# 305 "parser.mly"
                         (Add (_1, _3))
# 1182 "parser.ml"
               : 'dexp))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'dexp) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'dexp) in
    Obj.repr(
# 306 "parser.mly"
                   (Minus (_1, _3))
# 1190 "parser.ml"
               : 'dexp))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'dexp) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'dexp) in
    Obj.repr(
# 307 "parser.mly"
                  (Mult (_1, _3))
# 1198 "parser.ml"
               : 'dexp))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'dexp) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'dexp) in
    Obj.repr(
# 308 "parser.mly"
                 (Mod (_1, _3))
# 1206 "parser.ml"
               : 'dexp))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'dexp) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'dexp) in
    Obj.repr(
# 309 "parser.mly"
                (LT (_1, _3))
# 1214 "parser.ml"
               : 'dexp))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'dexp) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'dexp) in
    Obj.repr(
# 310 "parser.mly"
                (GT (_1, _3))
# 1222 "parser.ml"
               : 'dexp))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'dexp) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'dexp) in
    Obj.repr(
# 311 "parser.mly"
                (LE (_1, _3))
# 1230 "parser.ml"
               : 'dexp))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'dexp) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'dexp) in
    Obj.repr(
# 312 "parser.mly"
                (GE (_1, _3))
# 1238 "parser.ml"
               : 'dexp))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'dexp) in
    Obj.repr(
# 313 "parser.mly"
                        (_2)
# 1245 "parser.ml"
               : 'dexp))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 316 "parser.mly"
                       (Nested_vars (Vars _1, Vars _3))
# 1253 "parser.ml"
               : 'dnested_var))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 5 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 3 : 'dexp) in
    let _6 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 317 "parser.mly"
                          (Nested_vars (Vars_index (_1, _3), Vars _6))
# 1262 "parser.ml"
               : 'dnested_var))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 5 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 3 : string) in
    let _5 = (Parsing.peek_val __caml_parser_env 1 : 'dexp) in
    Obj.repr(
# 318 "parser.mly"
                          (Nested_vars (Vars _1, Vars_index (_3, _5)))
# 1271 "parser.ml"
               : 'dnested_var))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 8 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 6 : 'dexp) in
    let _6 = (Parsing.peek_val __caml_parser_env 3 : string) in
    let _8 = (Parsing.peek_val __caml_parser_env 1 : 'dexp) in
    Obj.repr(
# 319 "parser.mly"
                                       (Nested_vars (Vars_index (_1, _3), Vars_index (_6, _8)))
# 1281 "parser.ml"
               : 'dnested_var))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'dnested_var) in
    Obj.repr(
# 320 "parser.mly"
                       (Nested_vars (Vars _1, _3))
# 1289 "parser.ml"
               : 'dnested_var))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 5 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 3 : 'dexp) in
    let _6 = (Parsing.peek_val __caml_parser_env 0 : 'dnested_var) in
    Obj.repr(
# 321 "parser.mly"
                                   (Nested_vars (Vars_index (_1, _3), _6))
# 1298 "parser.ml"
               : 'dnested_var))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'dnested_var) in
    Obj.repr(
# 322 "parser.mly"
                       (_2)
# 1305 "parser.ml"
               : 'dnested_var))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 1 : 'inis) in
    Obj.repr(
# 326 "parser.mly"
  (tmp_init_assign := _3)
# 1312 "parser.ml"
               : 'init_decl))
; (fun __caml_parser_env ->
    Obj.repr(
# 329 "parser.mly"
       ([])
# 1318 "parser.ml"
               : 'inis))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 4 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 2 : 'exp) in
    let _5 = (Parsing.peek_val __caml_parser_env 0 : 'inis) in
    Obj.repr(
# 330 "parser.mly"
                                 ((Expr _3) :: _5)
# 1327 "parser.ml"
               : 'inis))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 6 : string) in
    let _4 = (Parsing.peek_val __caml_parser_env 3 : 'exps) in
    let _7 = (Parsing.peek_val __caml_parser_env 0 : 'inis) in
    Obj.repr(
# 331 "parser.mly"
                                          ((Expr (Aray _4)) :: _7)
# 1336 "parser.ml"
               : 'inis))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 7 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 5 : string) in
    let _5 = (Parsing.peek_val __caml_parser_env 3 : 'exps) in
    let _8 = (Parsing.peek_val __caml_parser_env 0 : 'inis) in
    Obj.repr(
# 341 "parser.mly"
     ((Module_instance (_3, _5)) :: _8)
# 1346 "parser.ml"
               : 'inis))
; (fun __caml_parser_env ->
    Obj.repr(
# 344 "parser.mly"
       ([])
# 1352 "parser.ml"
               : 'exps))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'exp) in
    Obj.repr(
# 345 "parser.mly"
       ([_1])
# 1359 "parser.ml"
               : 'exps))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'exp) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'exps) in
    Obj.repr(
# 346 "parser.mly"
                  (_1 :: _3)
# 1367 "parser.ml"
               : 'exps))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : int) in
    Obj.repr(
# 350 "parser.mly"
     (Const _1)
# 1374 "parser.ml"
               : 'exp))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : bool) in
    Obj.repr(
# 351 "parser.mly"
     (Const (if _1 then 1 else 0))
# 1381 "parser.ml"
               : 'exp))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 352 "parser.mly"
      (Vars _1)
# 1388 "parser.ml"
               : 'exp))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : 'exp) in
    Obj.repr(
# 353 "parser.mly"
                  (Vars_index (_1, _3))
# 1396 "parser.ml"
               : 'exp))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : 'exp) in
    Obj.repr(
# 362 "parser.mly"
     (let i1 = position_in_state_var_list _1 !tmp_state_var_list in 
	     if (i1 = -1) then
	       begin
		 print_endline ("state variable "^_1^" is not defined."); 
		 exit 1;
	       end;
		 State_expr (i1, _3))
# 1410 "parser.ml"
               : 'exp))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'nested_var) in
    Obj.repr(
# 369 "parser.mly"
               (_1)
# 1417 "parser.ml"
               : 'exp))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 374 "parser.mly"
     (let i = find_scalar_position _2 !tmp_var_list in
	     if i = -1 then (print_endline ("unknown type for "^_2); exit 1)
	     else (Const i))
# 1426 "parser.ml"
               : 'exp))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'exp) in
    Obj.repr(
# 377 "parser.mly"
              (Negi _2)
# 1433 "parser.ml"
               : 'exp))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'exp) in
    Obj.repr(
# 378 "parser.mly"
             (Negb _2)
# 1440 "parser.ml"
               : 'exp))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'exp) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'exp) in
    Obj.repr(
# 379 "parser.mly"
                 (Equal (_1, _3))
# 1448 "parser.ml"
               : 'exp))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'exp) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'exp) in
    Obj.repr(
# 380 "parser.mly"
                     (Negb (Equal (_1, _3)))
# 1456 "parser.ml"
               : 'exp))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'exp) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'exp) in
    Obj.repr(
# 381 "parser.mly"
                (Ando (_1, _3))
# 1464 "parser.ml"
               : 'exp))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'exp) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'exp) in
    Obj.repr(
# 382 "parser.mly"
               (Oro (_1, _3))
# 1472 "parser.ml"
               : 'exp))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'exp) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'exp) in
    Obj.repr(
# 383 "parser.mly"
               (Add (_1, _3))
# 1480 "parser.ml"
               : 'exp))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'exp) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'exp) in
    Obj.repr(
# 384 "parser.mly"
                 (Minus (_1, _3))
# 1488 "parser.ml"
               : 'exp))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'exp) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'exp) in
    Obj.repr(
# 385 "parser.mly"
                (Mult (_1, _3))
# 1496 "parser.ml"
               : 'exp))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'exp) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'exp) in
    Obj.repr(
# 386 "parser.mly"
               (Mod (_1, _3))
# 1504 "parser.ml"
               : 'exp))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'exp) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'exp) in
    Obj.repr(
# 387 "parser.mly"
              (LT (_1, _3))
# 1512 "parser.ml"
               : 'exp))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'exp) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'exp) in
    Obj.repr(
# 388 "parser.mly"
              (GT (_1, _3))
# 1520 "parser.ml"
               : 'exp))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'exp) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'exp) in
    Obj.repr(
# 389 "parser.mly"
              (LE (_1, _3))
# 1528 "parser.ml"
               : 'exp))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'exp) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'exp) in
    Obj.repr(
# 390 "parser.mly"
              (GE (_1, _3))
# 1536 "parser.ml"
               : 'exp))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'exp) in
    Obj.repr(
# 391 "parser.mly"
               (_2)
# 1543 "parser.ml"
               : 'exp))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 394 "parser.mly"
                      (Nested_vars (Vars _1, Vars _3))
# 1551 "parser.ml"
               : 'nested_var))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 5 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 3 : 'exp) in
    let _6 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 395 "parser.mly"
                         (Nested_vars (Vars_index (_1, _3), Vars _6))
# 1560 "parser.ml"
               : 'nested_var))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 5 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 3 : string) in
    let _5 = (Parsing.peek_val __caml_parser_env 1 : 'exp) in
    Obj.repr(
# 396 "parser.mly"
                         (Nested_vars (Vars _1, Vars_index (_3, _5)))
# 1569 "parser.ml"
               : 'nested_var))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 8 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 6 : 'exp) in
    let _6 = (Parsing.peek_val __caml_parser_env 3 : string) in
    let _8 = (Parsing.peek_val __caml_parser_env 1 : 'exp) in
    Obj.repr(
# 397 "parser.mly"
                                     (Nested_vars (Vars_index (_1, _3), Vars_index (_6, _8)))
# 1579 "parser.ml"
               : 'nested_var))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'nested_var) in
    Obj.repr(
# 398 "parser.mly"
                      (Nested_vars (Vars _1, _3))
# 1587 "parser.ml"
               : 'nested_var))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 5 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 3 : 'exp) in
    let _6 = (Parsing.peek_val __caml_parser_env 0 : 'nested_var) in
    Obj.repr(
# 399 "parser.mly"
                                 (Nested_vars (Vars_index (_1, _3), _6))
# 1596 "parser.ml"
               : 'nested_var))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'nested_var) in
    Obj.repr(
# 400 "parser.mly"
                      (_2)
# 1603 "parser.ml"
               : 'nested_var))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 1 : 'trans) in
    Obj.repr(
# 404 "parser.mly"
  (tmp_transitions := _3)
# 1610 "parser.ml"
               : 'trans_decl))
; (fun __caml_parser_env ->
    Obj.repr(
# 407 "parser.mly"
        ([])
# 1616 "parser.ml"
               : 'trans))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 6 : 'exp) in
    let _4 = (Parsing.peek_val __caml_parser_env 3 : 'rests) in
    let _7 = (Parsing.peek_val __caml_parser_env 0 : 'trans) in
    Obj.repr(
# 408 "parser.mly"
                                           ((_1, _4) :: _7)
# 1625 "parser.ml"
               : 'trans))
; (fun __caml_parser_env ->
    Obj.repr(
# 411 "parser.mly"
        ([])
# 1631 "parser.ml"
               : 'rests))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 4 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 2 : 'exp) in
    let _5 = (Parsing.peek_val __caml_parser_env 0 : 'rests) in
    Obj.repr(
# 412 "parser.mly"
                                  ((Vars _1, _3) :: _5)
# 1640 "parser.ml"
               : 'rests))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 7 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 5 : 'exp) in
    let _6 = (Parsing.peek_val __caml_parser_env 2 : 'exp) in
    let _8 = (Parsing.peek_val __caml_parser_env 0 : 'rests) in
    Obj.repr(
# 413 "parser.mly"
                                              ((Vars_index (_1, _3), _6) :: _8)
# 1650 "parser.ml"
               : 'rests))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 1 : 'fairness) in
    Obj.repr(
# 420 "parser.mly"
                                         (tmp_fairness := _3)
# 1657 "parser.ml"
               : 'fairness_decl))
; (fun __caml_parser_env ->
    Obj.repr(
# 423 "parser.mly"
          ([])
# 1663 "parser.ml"
               : 'fairness))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 5 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 3 : string) in
    let _6 = (Parsing.peek_val __caml_parser_env 0 : 'fairness) in
    Obj.repr(
# 424 "parser.mly"
                                    ((Atomic(_1, [SVar _3])) :: _6)
# 1672 "parser.ml"
               : 'fairness))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'fml) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'fairness) in
    Obj.repr(
# 425 "parser.mly"
                          (_1 :: _3)
# 1680 "parser.ml"
               : 'fairness))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 1 : 'atomics) in
    Obj.repr(
# 438 "parser.mly"
  (tmp_state_var_list := [])
# 1687 "parser.ml"
               : 'atomic_decl))
; (fun __caml_parser_env ->
    Obj.repr(
# 441 "parser.mly"
          ()
# 1693 "parser.ml"
               : 'atomics))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 7 : 'atomics) in
    let _2 = (Parsing.peek_val __caml_parser_env 6 : string) in
    let _4 = (Parsing.peek_val __caml_parser_env 4 : 'bound_var) in
    let _7 = (Parsing.peek_val __caml_parser_env 1 : 'exp) in
    Obj.repr(
# 443 "parser.mly"
     (Hashtbl.add !tmp_atomic_tbl _2 _7)
# 1703 "parser.ml"
               : 'atomics))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'bound_vars) in
    Obj.repr(
# 446 "parser.mly"
                      (tmp_state_var_list := _1)
# 1710 "parser.ml"
               : 'bound_var))
; (fun __caml_parser_env ->
    Obj.repr(
# 449 "parser.mly"
             ([])
# 1716 "parser.ml"
               : 'bound_vars))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 450 "parser.mly"
      ([_1])
# 1723 "parser.ml"
               : 'bound_vars))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'bound_vars) in
    Obj.repr(
# 451 "parser.mly"
                        (_1 :: _3)
# 1731 "parser.ml"
               : 'bound_vars))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 1 : 'specs) in
    Obj.repr(
# 455 "parser.mly"
  (tmp_spec_list := _3)
# 1738 "parser.ml"
               : 'spec_decl))
; (fun __caml_parser_env ->
    Obj.repr(
# 458 "parser.mly"
        ([])
# 1744 "parser.ml"
               : 'specs))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 4 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 2 : 'fml) in
    let _5 = (Parsing.peek_val __caml_parser_env 0 : 'specs) in
    Obj.repr(
# 459 "parser.mly"
                                  ((_1, _3) :: _5)
# 1753 "parser.ml"
               : 'specs))
; (fun __caml_parser_env ->
    Obj.repr(
# 462 "parser.mly"
          (Top)
# 1759 "parser.ml"
               : 'fml))
; (fun __caml_parser_env ->
    Obj.repr(
# 463 "parser.mly"
          (Bottom)
# 1765 "parser.ml"
               : 'fml))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : 'atom_fml_para) in
    Obj.repr(
# 464 "parser.mly"
                            (Atomic (_1, _3))
# 1773 "parser.ml"
               : 'fml))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'fml) in
    Obj.repr(
# 465 "parser.mly"
           (Neg _2)
# 1780 "parser.ml"
               : 'fml))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'fml) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'fml) in
    Obj.repr(
# 466 "parser.mly"
               (And (_1, _3))
# 1788 "parser.ml"
               : 'fml))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'fml) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'fml) in
    Obj.repr(
# 467 "parser.mly"
              (Or (_1, _3))
# 1796 "parser.ml"
               : 'fml))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 5 : string) in
    let _5 = (Parsing.peek_val __caml_parser_env 3 : 'fml) in
    let _7 = (Parsing.peek_val __caml_parser_env 1 : string) in
    Obj.repr(
# 468 "parser.mly"
                                    (AX (SVar _3, _5, SVar _7))
# 1805 "parser.ml"
               : 'fml))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 5 : string) in
    let _5 = (Parsing.peek_val __caml_parser_env 3 : 'fml) in
    let _7 = (Parsing.peek_val __caml_parser_env 1 : string) in
    Obj.repr(
# 469 "parser.mly"
                                    (EX (SVar _3, _5, SVar _7))
# 1814 "parser.ml"
               : 'fml))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 5 : string) in
    let _5 = (Parsing.peek_val __caml_parser_env 3 : 'fml) in
    let _7 = (Parsing.peek_val __caml_parser_env 1 : string) in
    Obj.repr(
# 470 "parser.mly"
                                    (AF (SVar _3, _5, SVar _7))
# 1823 "parser.ml"
               : 'fml))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 5 : string) in
    let _5 = (Parsing.peek_val __caml_parser_env 3 : 'fml) in
    let _7 = (Parsing.peek_val __caml_parser_env 1 : string) in
    Obj.repr(
# 471 "parser.mly"
                                    (EG (SVar _3, _5, SVar _7))
# 1832 "parser.ml"
               : 'fml))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 9 : string) in
    let _5 = (Parsing.peek_val __caml_parser_env 7 : string) in
    let _7 = (Parsing.peek_val __caml_parser_env 5 : 'fml) in
    let _9 = (Parsing.peek_val __caml_parser_env 3 : 'fml) in
    let _11 = (Parsing.peek_val __caml_parser_env 1 : string) in
    Obj.repr(
# 473 "parser.mly"
     (AR (SVar _3, SVar _5, _7, _9, SVar _11))
# 1843 "parser.ml"
               : 'fml))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 9 : string) in
    let _5 = (Parsing.peek_val __caml_parser_env 7 : string) in
    let _7 = (Parsing.peek_val __caml_parser_env 5 : 'fml) in
    let _9 = (Parsing.peek_val __caml_parser_env 3 : 'fml) in
    let _11 = (Parsing.peek_val __caml_parser_env 1 : string) in
    Obj.repr(
# 475 "parser.mly"
     (EU (SVar _3, SVar _5, _7, _9, SVar _11))
# 1854 "parser.ml"
               : 'fml))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'fml) in
    Obj.repr(
# 476 "parser.mly"
                (_2)
# 1861 "parser.ml"
               : 'fml))
; (fun __caml_parser_env ->
    Obj.repr(
# 479 "parser.mly"
                ([])
# 1867 "parser.ml"
               : 'atom_fml_para))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 480 "parser.mly"
      ([SVar _1])
# 1874 "parser.ml"
               : 'atom_fml_para))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'atom_fml_para) in
    Obj.repr(
# 481 "parser.mly"
                          ((SVar _1) :: _3)
# 1882 "parser.ml"
               : 'atom_fml_para))
(* Entry input *)
; (fun __caml_parser_env -> raise (Parsing.YYexit (Parsing.peek_val __caml_parser_env 0)))
|]
let yytables =
  { Parsing.actions=yyact;
    Parsing.transl_const=yytransl_const;
    Parsing.transl_block=yytransl_block;
    Parsing.lhs=yylhs;
    Parsing.len=yylen;
    Parsing.defred=yydefred;
    Parsing.dgoto=yydgoto;
    Parsing.sindex=yysindex;
    Parsing.rindex=yyrindex;
    Parsing.gindex=yygindex;
    Parsing.tablesize=yytablesize;
    Parsing.table=yytable;
    Parsing.check=yycheck;
    Parsing.error_function=parse_error;
    Parsing.names_const=yynames_const;
    Parsing.names_block=yynames_block }
let input (lexfun : Lexing.lexbuf -> token) (lexbuf : Lexing.lexbuf) =
   (Parsing.yyparse yytables 1 lexfun lexbuf : (((string, Modul.modul0) Hashtbl.t) * Modul.modul0))
;;
# 485 "parser.mly"

# 1909 "parser.ml"
